{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3810e9fd",
   "metadata": {
    "papermill": {
     "duration": 0.00431,
     "end_time": "2024-08-26T22:02:47.744105",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.739795",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "  # **Miuul Data Science Bootcamp Study Case**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f1772313",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T22:02:47.753786Z",
     "iopub.status.busy": "2024-08-26T22:02:47.753210Z",
     "iopub.status.idle": "2024-08-26T22:02:47.763749Z",
     "shell.execute_reply": "2024-08-26T22:02:47.762524Z"
    },
    "papermill": {
     "duration": 0.018109,
     "end_time": "2024-08-26T22:02:47.766080",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.747971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "text = \"The goal is to turn data into information, and information into insight.\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0d91024",
   "metadata": {
    "papermill": {
     "duration": 0.003651,
     "end_time": "2024-08-26T22:02:47.773529",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.769878",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Convert all letters of the given string expression to uppercase. Use spaces instead of commas and periods, separate words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "eff055d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T22:02:47.782697Z",
     "iopub.status.busy": "2024-08-26T22:02:47.782238Z",
     "iopub.status.idle": "2024-08-26T22:02:47.788981Z",
     "shell.execute_reply": "2024-08-26T22:02:47.787818Z"
    },
    "papermill": {
     "duration": 0.014254,
     "end_time": "2024-08-26T22:02:47.791516",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.777262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "THE GOAL IS TO TURN DATA INTO INFORMATION, AND INFORMATION INTO INSIGHT.\n",
      "['THE', 'GOAL', 'IS', 'TO', 'TURN', 'DATA', 'INTO', 'INFORMATION', 'AND', 'INFORMATION', 'INTO', 'INSIGHT']\n"
     ]
    }
   ],
   "source": [
    "print(text.upper())\n",
    "\n",
    "a = text.upper()\n",
    "\n",
    "b = a.replace(\",\", \" \")\n",
    "    \n",
    "c = b.replace(\".\", \" \")\n",
    "    \n",
    "print(c.split())\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9661437",
   "metadata": {
    "papermill": {
     "duration": 0.003805,
     "end_time": "2024-08-26T22:02:47.799649",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.795844",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Dictionary Operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5b04b554",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T22:02:47.808775Z",
     "iopub.status.busy": "2024-08-26T22:02:47.808360Z",
     "iopub.status.idle": "2024-08-26T22:02:47.816521Z",
     "shell.execute_reply": "2024-08-26T22:02:47.815119Z"
    },
    "papermill": {
     "duration": 0.015687,
     "end_time": "2024-08-26T22:02:47.819087",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.803400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['Christian', 'Daisy', 'Antonio', 'Dante'])\n",
      "dict_values([['America', 18], ['England', 12], ['Spain', 22], ['Italy', 25]])\n",
      "{'Christian': ['America', 18], 'Daisy': ['England', 13], 'Antonio': ['Spain', 22], 'Dante': ['Italy', 25]}\n",
      "{'Christian': ['America', 18], 'Daisy': ['England', 13], 'Antonio': ['Spain', 22], 'Dante': ['Italy', 25], 'Ahmet': ['Turkey', 24]}\n",
      "{'Christian': ['America', 18], 'Daisy': ['England', 13], 'Dante': ['Italy', 25], 'Ahmet': ['Turkey', 24]}\n"
     ]
    }
   ],
   "source": [
    "dict = {'Christian': [\"America\",18],\n",
    "        'Daisy':[\"England\",12],\n",
    "        'Antonio':[\"Spain\",22],\n",
    "        'Dante':[\"Italy\",25]}\n",
    "\n",
    "print(dict.keys())\n",
    "print(dict.values())\n",
    "dict[\"Daisy\"] = [\"England\", 13]\n",
    "print(dict)\n",
    "dict[\"Ahmet\"] = [\"Turkey\", 24]\n",
    "print(dict)\n",
    "dict.pop(\"Antonio\")\n",
    "print(dict)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23daec76",
   "metadata": {
    "papermill": {
     "duration": 0.003608,
     "end_time": "2024-08-26T22:02:47.826698",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.823090",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Write a function that takes a list as an argument, assigns the odd and even numbers in the list to separate lists, and returns these lists.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a82aeed6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T22:02:47.836128Z",
     "iopub.status.busy": "2024-08-26T22:02:47.835715Z",
     "iopub.status.idle": "2024-08-26T22:02:47.846426Z",
     "shell.execute_reply": "2024-08-26T22:02:47.845128Z"
    },
    "papermill": {
     "duration": 0.017981,
     "end_time": "2024-08-26T22:02:47.848603",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.830622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[], []]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[[2, 18, 22], [13, 93]]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l = [2,13,18,93,22]\n",
    "\n",
    "groups = [[], []]\n",
    "\n",
    "def func(x):\n",
    "    print(groups)\n",
    "    for x in l:\n",
    "        if x % 2 == 0:\n",
    "            groups[0].append(x)\n",
    "        else:\n",
    "            groups[1].append(x)\n",
    "    return groups\n",
    "\n",
    "func(l)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb5d050d",
   "metadata": {
    "papermill": {
     "duration": 0.00391,
     "end_time": "2024-08-26T22:02:47.856634",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.852724",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Enumerate Students "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e26df00f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T22:02:47.866690Z",
     "iopub.status.busy": "2024-08-26T22:02:47.866194Z",
     "iopub.status.idle": "2024-08-26T22:02:47.873402Z",
     "shell.execute_reply": "2024-08-26T22:02:47.872232Z"
    },
    "papermill": {
     "duration": 0.014989,
     "end_time": "2024-08-26T22:02:47.875774",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.860785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Muhendislik Fakultesi 1. Ogrenci, Ali\n",
      "Muhendislik Fakultesi 2. Ogrenci, Veli\n",
      "Muhendislik Fakultesi 3. Ogrenci, Ayşe\n",
      "Tip Fakultesi 1. Ogrenci, Talat\n",
      "Tip Fakultesi 2. Ogrenci, Zeynep\n",
      "Tip Fakultesi 3. Ogrenci, Ece\n"
     ]
    }
   ],
   "source": [
    "students = [\"Ali\",\"Veli\",\"Ayşe\",\"Talat\",\"Zeynep\",\"Ece\"]\n",
    "sayac = 1\n",
    "\n",
    "for i, value in enumerate(students, start=1):\n",
    "    if i <= 3:\n",
    "        print(f\"Muhendislik Fakultesi {i}. Ogrenci, {value}\")\n",
    "    if i > 3:\n",
    "        print(f\"Tip Fakultesi {sayac}. Ogrenci, {value}\")\n",
    "        sayac += 1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "163f75ca",
   "metadata": {
    "papermill": {
     "duration": 0.004045,
     "end_time": "2024-08-26T22:02:47.884224",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.880179",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d190697b",
   "metadata": {
    "papermill": {
     "duration": 0.003754,
     "end_time": "2024-08-26T22:02:47.892177",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.888423",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "Below are 3 lists. The lists contain the code, credit and quota information of a course.Print the course information using Zip."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "faa7ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T22:02:47.902130Z",
     "iopub.status.busy": "2024-08-26T22:02:47.901709Z",
     "iopub.status.idle": "2024-08-26T22:02:47.908153Z",
     "shell.execute_reply": "2024-08-26T22:02:47.907080Z"
    },
    "papermill": {
     "duration": 0.01417,
     "end_time": "2024-08-26T22:02:47.910418",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.896248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Kredi 3 olan CMP1005 kodlu dersin kontenjanı 30 kişidir.\n",
      "Kredi 4 olan PSY1005 kodlu dersin kontenjanı 75 kişidir.\n",
      "Kredi 2 olan HUK1005 kodlu dersin kontenjanı 150 kişidir.\n",
      "Kredi 4 olan SEN2204 kodlu dersin kontenjanı 25 kişidir.\n"
     ]
    }
   ],
   "source": [
    "ders_kodu = [\"CMP1005\", \"PSY1005\", \"HUK1005\", \"SEN2204\"]\n",
    "kredi = [3, 4, 2, 4]\n",
    "kontenjan = [30, 75, 150, 25]\n",
    "\n",
    "for k, kod, kon in zip(kredi, ders_kodu, kontenjan):\n",
    "    print(f\"Kredi {k} olan {kod} kodlu dersin kontenjanı {kon} kişidir.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "989aeac0",
   "metadata": {
    "papermill": {
     "duration": 0.004004,
     "end_time": "2024-08-26T22:02:47.918704",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.914700",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Below are 2 sets.\n",
    "You are expected to define the function that will print the common elements of the 1st set if it covers the 2nd set, and the difference of the 2nd set from the 1st set if it does not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6cbb85bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T22:02:47.929496Z",
     "iopub.status.busy": "2024-08-26T22:02:47.928410Z",
     "iopub.status.idle": "2024-08-26T22:02:47.935172Z",
     "shell.execute_reply": "2024-08-26T22:02:47.933976Z"
    },
    "papermill": {
     "duration": 0.014829,
     "end_time": "2024-08-26T22:02:47.937687",
     "exception": false,
     "start_time": "2024-08-26T22:02:47.922858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'lambda', 'function', 'miuul', 'qcut'}\n"
     ]
    }
   ],
   "source": [
    "set1 = {\"data\", \"python\"}\n",
    "set2 = {\"data\", \"function\", \"qcut\", \"lambda\", \"python\", \"miuul\"}\n",
    "\n",
    "if set1.issuperset(set2):\n",
    "    print(set1.intersection(set2))\n",
    "else:\n",
    "    print(set2.difference(set1))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.746864,
   "end_time": "2024-08-26T22:02:48.261917",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-26T22:02:44.515053",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
