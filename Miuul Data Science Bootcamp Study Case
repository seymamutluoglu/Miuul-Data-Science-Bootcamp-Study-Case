{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30761,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"  # **Miuul Data Science Bootcamp Study Case**\n","metadata":{}},{"cell_type":"code","source":"text = \"The goal is to turn data into information, and information into insight.\"","metadata":{"execution":{"iopub.status.busy":"2024-08-26T21:27:39.796534Z","iopub.execute_input":"2024-08-26T21:27:39.797567Z","iopub.status.idle":"2024-08-26T21:27:39.802424Z","shell.execute_reply.started":"2024-08-26T21:27:39.797497Z","shell.execute_reply":"2024-08-26T21:27:39.801240Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"Convert all letters of the given string expression to uppercase. Use spaces instead of commas and periods, separate words.","metadata":{}},{"cell_type":"code","source":"print(text.upper())\n\na = text.upper()\n\nb = a.replace(\",\", \" \")\n    \nc = b.replace(\".\", \" \")\n    \nprint(c.split())\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T21:30:02.296553Z","iopub.execute_input":"2024-08-26T21:30:02.296956Z","iopub.status.idle":"2024-08-26T21:30:02.303966Z","shell.execute_reply.started":"2024-08-26T21:30:02.296918Z","shell.execute_reply":"2024-08-26T21:30:02.302722Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"THE GOAL IS TO TURN DATA INTO INFORMATION, AND INFORMATION INTO INSIGHT.\n['THE', 'GOAL', 'IS', 'TO', 'TURN', 'DATA', 'INTO', 'INFORMATION', 'AND', 'INFORMATION', 'INTO', 'INSIGHT']\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Dictionary Operations","metadata":{}},{"cell_type":"code","source":"dict = {'Christian': [\"America\",18],\n        'Daisy':[\"England\",12],\n        'Antonio':[\"Spain\",22],\n        'Dante':[\"Italy\",25]}\n\nprint(dict.keys())\nprint(dict.values())\ndict[\"Daisy\"] = [\"England\", 13]\nprint(dict)\ndict[\"Ahmet\"] = [\"Turkey\", 24]\nprint(dict)\ndict.pop(\"Antonio\")\nprint(dict)\n","metadata":{"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"dict_keys(['Christian', 'Daisy', 'Antonio', 'Dante'])\ndict_values([['America', 18], ['England', 12], ['Spain', 22], ['Italy', 25]])\n{'Christian': ['America', 18], 'Daisy': ['England', 13], 'Antonio': ['Spain', 22], 'Dante': ['Italy', 25]}\n{'Christian': ['America', 18], 'Daisy': ['England', 13], 'Antonio': ['Spain', 22], 'Dante': ['Italy', 25], 'Ahmet': ['Turkey', 24]}\n{'Christian': ['America', 18], 'Daisy': ['England', 13], 'Dante': ['Italy', 25], 'Ahmet': ['Turkey', 24]}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Write a function that takes a list as an argument, assigns the odd and even numbers in the list to separate lists, and returns these lists.\n\n","metadata":{}},{"cell_type":"code","source":"l = [2,13,18,93,22]\n\ngroups = [[], []]\n\ndef func(x):\n    print(groups)\n    for x in l:\n        if x % 2 == 0:\n            groups[0].append(x)\n        else:\n            groups[1].append(x)\n    return groups\n\nfunc(l)","metadata":{"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"[[], []]\n","output_type":"stream"},{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"[[2, 18, 22], [13, 93]]"},"metadata":{}}]},{"cell_type":"markdown","source":"Enumerate Students ","metadata":{}},{"cell_type":"code","source":"students = [\"Ali\",\"Veli\",\"Ayşe\",\"Talat\",\"Zeynep\",\"Ece\"]\nsayac = 1\n\nfor i, value in enumerate(students, start=1):\n    if i <= 3:\n        print(f\"Muhendislik Fakultesi {i}. Ogrenci, {value}\")\n    if i > 3:\n        print(f\"Tip Fakultesi {sayac}. Ogrenci, {value}\")\n        sayac += 1\n","metadata":{"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"Muhendislik Fakultesi 1. Ogrenci, Ali\nMuhendislik Fakultesi 2. Ogrenci, Veli\nMuhendislik Fakultesi 3. Ogrenci, Ayşe\nTip Fakultesi 1. Ogrenci, Talat\nTip Fakultesi 2. Ogrenci, Zeynep\nTip Fakultesi 3. Ogrenci, Ece\n","output_type":"stream"}]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"\nBelow are 3 lists. The lists contain the code, credit and quota information of a course.Print the course information using Zip.","metadata":{}},{"cell_type":"code","source":"ders_kodu = [\"CMP1005\", \"PSY1005\", \"HUK1005\", \"SEN2204\"]\nkredi = [3, 4, 2, 4]\nkontenjan = [30, 75, 150, 25]\n\nfor k, kod, kon in zip(kredi, ders_kodu, kontenjan):\n    print(f\"Kredi {k} olan {kod} kodlu dersin kontenjanı {kon} kişidir.\")","metadata":{"execution":{"iopub.status.busy":"2024-08-26T21:47:53.389813Z","iopub.execute_input":"2024-08-26T21:47:53.390237Z","iopub.status.idle":"2024-08-26T21:47:53.397318Z","shell.execute_reply.started":"2024-08-26T21:47:53.390184Z","shell.execute_reply":"2024-08-26T21:47:53.396238Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"Kredi 3 olan CMP1005 kodlu dersin kontenjanı 30 kişidir.\nKredi 4 olan PSY1005 kodlu dersin kontenjanı 75 kişidir.\nKredi 2 olan HUK1005 kodlu dersin kontenjanı 150 kişidir.\nKredi 4 olan SEN2204 kodlu dersin kontenjanı 25 kişidir.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Below are 2 sets.\nYou are expected to define the function that will print the common elements of the 1st set if it covers the 2nd set, and the difference of the 2nd set from the 1st set if it does not.","metadata":{}},{"cell_type":"code","source":"set1 = {\"data\", \"python\"}\nset2 = {\"data\", \"function\", \"qcut\", \"lambda\", \"python\", \"miuul\"}\n\nif set1.issuperset(set2):\n    print(set1.intersection(set2))\nelse:\n    print(set2.difference(set1))","metadata":{"execution":{"iopub.status.busy":"2024-08-26T21:49:49.143177Z","iopub.execute_input":"2024-08-26T21:49:49.143923Z","iopub.status.idle":"2024-08-26T21:49:49.150680Z","shell.execute_reply.started":"2024-08-26T21:49:49.143881Z","shell.execute_reply":"2024-08-26T21:49:49.149578Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"{'qcut', 'lambda', 'function', 'miuul'}\n","output_type":"stream"}]}]}